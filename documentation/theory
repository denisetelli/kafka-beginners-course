TOPICS, PARTITIONS AND OFFSETS
- Topics: a particular stream of data. 
	Topics are split in Partitions: messages within each partition are ordered
- Data stream: sequence of messages
- Once the data is written to a partition, it cannot be changed (immutability)
- Data is kept only for a limited time (configurable)
- Offeset only have a meaning for a specific partition. 
- Order is guaranteed only within a partition (not a across partitions)
 
PRODUCERS AND MESSAGES KEYS
- Producers can chose to send a key with the message (string, number, binary, etc)
	If key=null, data is sent round robin (partition 0, then 1, then 2)
	If key!=null, the all messages for that key will always go to the same partition (hashing)

CONSUMER AND DESERIALIZATION
- Consumers read data from a topic (identified by name) - pull model
- Consumers automatically know which broker to read from
- In case of broker ailures, consumers know how to recover
- Data is read in order from low to high offset within partitions

CONSUMER GROUPS AND CONSUMER OFFSETS
- The serialization/ deserialization type must not change during a topic lifecycle (create a new topic instead)
- Consumer Offsets: If a consumer dies, it will be able to read back from where it left thanks to the commited consumer offsets
- The offsets committed are in Kafka topic named "_ _consumer_offsets"
- By defaulst, Java consumers will automatically commit offsets (at leats once)

BROKERS AND TOPICS
- A Kafka cluster is composed of multiple brokers (servers), they are called brokers because they receive and send data 
- Each broker is identified with its ID (integer)
- Each broker contains certain topic partitions 
- After connecting to any broker (called a boostrap broker), you will be connected to the entire cluster (Kafka clients have smart mechanics for that)
- A good number to get started is 3 brokers, but some big clusters have over 100 brokers

TOPIC REPLICATION
- At any time ONE broker can be a leader for a given partition. The other brokers will replicate the data
- Producers can olny send data to the broker that is leader of a partition. Therefore, each partition has one leader and multiple ISR (in-sync replica)

ZOOKEEPER
- Is a software that manages brokers (keeps a list of them)
- It sends notifications to kafka in case of changes (e.g. new topic, broker dies, broker comes up, delete topics, etc.)
- Kafka 3.x can work without Zookeeper - using kafka Raft instead
- Zookeeper by design operates with an odd number of servers (1.3.5.7)
- Zookeeper has a leader (srites) the rest of the servers are followers (reads)
